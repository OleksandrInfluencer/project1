# Логічне множення and
# Логічне розташування or
# Логічне заперечення not
#
# Розв'язання задач
# Анотація. Вивчаю спосіб роботи логічних операторів у Python та пріоритетність їх виконання.
# Логічні оператори
# Як бути у ситуації, коли у нас є кілька умів? У Python є три логічні оператори, які дозволяють створювати складні умови:
#
# and - Логічне множення;
# or - логічне розташування;
# not - Логічне заперечення.



# Оператор і
# Попередньо, ми написали програму для учнів від дванадцяти років, які навчаються по крайній мірі в 7 класі.
# Доступ до неї тем, хто молодше, надо запретить. Наступний код вирішує поставлену задачу:
# age = int(input("Скільки вам років?: "))
# grade = int(input("В якому класі ви вчитесь?: "))
#
# if age >= 12 and grade >= 7:
#     print("Доступ дозволено")
# else:
#     print("Доступ заборонено!!!")
# # Ми об('єднали дві умови за допомогою оператора and.
# # Він означає, що в цьому ветвленні блок коду виконується тільки при виконанні обох умов одночасно !


# Оператор and може об'єднати довільну кількість умов:
# age = int(input("Скільки вам років?: "))
# grade = int(input("В якому класі ви вчитесь?: "))
# city = input("В якому місті ви жевете?: ")
#
# if age >= 12 and grade >= 7 and city == "Kiev":
#     print("Доступ дозволено")
# else:
#     print("Доступ заборонено!")

# Пріоритети логічних операторів
# Логічні оператори, подібні арифметичним операторам ( +, -, *, /), мають пріоритет виконання. Пріоритет виконання наступного:
#
# в першу чергу виконується логічне відкидання not;
# далее выполняется логическое умножение and;
# далі виконується логічне розташування  or.
# Для явного вказівки порядку виконання умовних операторів використовують скобки .

