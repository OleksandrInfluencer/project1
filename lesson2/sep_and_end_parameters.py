# # Тема уроку: sep, end, змінні, PEP 8
# # Необов'язкові параметри команди print(): sep, end
# # Множинне присвоєння
# # Стандарт PEP 8
# # Коментарі
# # Анотація. Урок присвячений вивченню необов('язкових параметрів команди print() та додаткових можливостей змінних
# # Також ми поговоримо про коментарі та стандарт PEP 8, якого дотримуються Python-програмісти.)
#
#
#
# # Параметр sep
#
# print("aa", "bb", "cc")
#
# # Як ви можете помітити, всі рядки виводяться з пробілом між собою – це невипадкова поведінка.
# # Команда print() має параметр, який відповідає за поділ аргументів при виведенні.
# # Цей параметр називається sep (separator – роздільник). За промовчанням цей параметр дорівнює символу пропуску ( ).
# # Наступні рядки коду є еквівалентними:
#
# print("aa", "bb", "cc", sep=" ")
#
# # Мы можем изменить параметр sep на любую другую строку, например, на символ звёздочки (*).
# # Приведённый ниже код:
#
# print("aa", "bb", "cc", sep="*")
#
# # Зараз у нас аргументи розділені символом зірочки (*)
# # Також як параметр sep ми можемо вказати і змінну
#
# minus = "-"
# print("aa", "bb", "cc", sep=minus)
#
#
#
# # Параметр end
#
# # Як можна помітити, після кожного print() курсор переходить на новий рядок.
# # І ця поведінка теж не є випадковою, тому що команда print() має параметр end, що визначає,
# # що потрібно додати в кінець виведення. За замовчуванням параметр end дорівнює символу перекладу рядка (\n).
#
# # Наступні рядки коду є еквівалентними:
#
# print("A great man doesn't seek to lead.")
# print("He's called to it. And he answers.")
#
# print("A great man doesn't seek to lead.", end="\n")
# print("He's called to it. And he answers.", end="\n")
#
#
# # Якщо переклад рядка робити не потрібно або потрібно вказати спеціальне закінчення для виведення,
# # слід явно вказати значення для параметра end (можемо вказати через змінну, як і з параметром sep)
#
# minus = "-"
# print("aa", "bb", "cc", end=minus)
# print("second line")
#
# # Після друку першої команди print() вставлено символ - замість символу перекладу рядка \n.
# # Таким чином, параметр end визначає рядок, який буде додано після виведення всіх аргументів команди print()
#
#
# # Послідовність символів називається керуючою послідовністю і задає переклад рядка.
#
# print("aa", "\n", "bb", "\n", "cc", sep="*", end="#")
#
# # Параметри sep та end можна встановлювати одночасно.
#
# print("aa", "bb", "cc", sep="*", end="finish")
#
# # Для різних команд print() можна задавати різні параметри sep та end.
#
# arg1 = "Hello"
# sep1 = "_-_"
# end2 = "+++"
# print(arg1, "everione", sep=sep1, end="! ")
# print("How", "are", "you", "in", "2024", sep=" ", end=end2)
#
# # Щоб прибрати всі додаткові символи, можна встановити параметри sep і end команди print() як порожні рядки ('').
#
#
# print("a", "b", "c", sep="", end="")
# print("d", "e", "f", sep="", end="")
#
# # Параметр end визначає символ або рядок, який буде додано після виведення всіх значень.
#
#
#
# # Множинне присвоєння
# #
# # У мові Python за одну інструкцію надання можна задавати значення відразу декільком змінним. Робиться це так:
#
#
# name, surname = "Oleksandr", "Polishchuk"
# print("Name", name, "Surname", surname)
#
# # Цей код можна записати і так:
#
#
# name = "Oleksandr"
# surname = "Polishchuk"
# print("Name", name, "Surname", surname)
#
# # Якщо потрібно вважати текст з клавіатури і присвоїти його як значення змінним, можна написати так:
#
#
# name, surname = input(), input()
# print("Name", name, "Surname", surname)
#
# # Не забувай: нове значення змінної витісняє старе.
#
#
# language = 'Python'
# language = 'Pascal'
# print(language)